package com.raritan.tdz.page.domain;

import java.io.Serializable;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Collection;


import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Lob;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Transient;

import org.apache.commons.lang.SerializationUtils;
//import org.apache.log4j.Logger;
import org.codehaus.jackson.map.ObjectMapper; 
import org.hibernate.annotations.Type;

import com.raritan.tdz.page.dto.ColumnCriteriaDTO;
import com.raritan.tdz.page.dto.ColumnDTO;
import com.raritan.tdz.page.dto.FilterDTO;
import com.raritan.tdz.page.dto.ListCriteriaDTO;

/**
* PglistSettings generated by KC
*/
@Entity
@Table(name="dct_pglist_settings")
public class PglistSettings implements Serializable {		
	 private static final long serialVersionUID = 7175928785517380815L;
	
	 //protected Logger log = Logger.getLogger( this.getClass() );
	 
	 public PglistSettings() {		 
	 }
	 
	 public PglistSettings( String listName, String userIdStr, boolean isSystemDefault, boolean isActive, ListCriteriaDTO listCriteriaDTO ) {		 
		//this.pglistSettingId = pglistSettingId;
		this.userId = Long.parseLong(userIdStr);
		this.isSystemDefault = isSystemDefault;
		this.isActive = isActive;		
		this.listName = listName;
		
		if(listCriteriaDTO!=null){
			parseJasonString(listCriteriaDTO);
		}
	}

	 private static final int JASON_OBJ_LENGTH_LIMIT = 4000;
	 
	 /** Generate the string from ListCriteriaDTO. */
	 public void parseJasonString(ListCriteriaDTO listCriteriaDTO){
		try {
			setListCriteriaDTO(listCriteriaDTO);
			ObjectMapper mapper = new ObjectMapper();
			ListCriteriaDTO usefulDto = toBasicUsefulJsonDtoString(listCriteriaDTO);
			this.jsonObject = mapper.writeValueAsString(usefulDto);

			Collection<String> listCols = toColumnsUsefulJsonDtoString(listCriteriaDTO);
			if (listCols != null && listCols.size() > 0)
				this.jsonObject += mapper.writeValueAsString(listCols);

			List<ColumnCriteriaDTO> listColsCr = toColumnsCriteriaUsefulJsonDtoString(listCriteriaDTO);
			if (listColsCr != null && listColsCr.size() > 0)
				this.jsonObject += mapper.writeValueAsString(listColsCr);

			// Cut the string over JASON_OBJ_LENGTH_LIMIT(4000)
			if (this.jsonObject != null
					&& this.jsonObject.length() > JASON_OBJ_LENGTH_LIMIT)
				this.jsonObject = this.jsonObject.substring(0,
						JASON_OBJ_LENGTH_LIMIT - 1);
		} catch (Exception e) {
			e.printStackTrace();
		}
	 }
	 
	 /** Generate the basic ListCriteriaDTO object string */
	 private ListCriteriaDTO toBasicUsefulJsonDtoString(ListCriteriaDTO listCriteriaDTO){
		 ListCriteriaDTO dto = new ListCriteriaDTO();		 		 		 
		 dto.setMaxLinesPerPage(listCriteriaDTO.getMaxLinesPerPage());
		 dto.setPageNumber(listCriteriaDTO.getPageNumber());		
		 dto.setFitType(listCriteriaDTO.getFitType());
		 return dto;
	 }
	 
	 /** Generate the ColumnsCriteria' name list. */
	 private List<ColumnCriteriaDTO> toColumnsCriteriaUsefulJsonDtoString(ListCriteriaDTO listCriteriaDTO){
		 List<ColumnCriteriaDTO> list = new ArrayList<ColumnCriteriaDTO>();
		 List<ColumnCriteriaDTO> cols = listCriteriaDTO.getColumnCriteria();
		 if(cols!=null && cols.size()>0){
			 FilterDTO filter=null;
			 for(ColumnCriteriaDTO col:cols){
				 filter = col.getFilter();
				 if(col.isToSort()==true){
					 if(filter != null){
						 if ( filter.getGroupType()!=0 || 
						      (filter.getLessThan()!=null && filter.getLessThan().length()>0) ||
						      (filter.getEqual()!=null && filter.getEqual().length()>0) ||
						      (filter.getIsLookup()==true) ||
						      (filter.getGreaterThan()!=null && filter.getGreaterThan().length()>0) ||
						      (filter.getLookupCodes()!=null && filter.getLookupCodes().length()>0) ||
						      filter.isLookup() == true
						 )
						 {	 
							 list.add(col);
						 }	 
					}//end if filter
				 }//end if col.isToSort()
			 }//end for
		 }//end if cols!=null
		 //log.info("List ColumnsCriteria="+list.size());
		 return list;
	 }
	 
	 /** Generate the columns' name list. */
	 private Collection<String> toColumnsUsefulJsonDtoString(ListCriteriaDTO listCriteriaDTO){
		 Collection<String> list = new ArrayList<String>();
		 List<ColumnDTO> cols = listCriteriaDTO.getColumns();
		 if(cols!=null && cols.size()>0){
			 for(ColumnDTO c:cols){
				 list.add(c.getFieldName());
			 }
		 }
		 //log.info("List Columns="+list.size());
		 return list;
	 }
	 
	@Id
	 @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "dct_pglist_settings_seq")
	 @SequenceGenerator(name = "dct_pglist_settings_seq", sequenceName = "dct_pglist_settings_pglist_setting_id_seq", allocationSize=1)
	 @Column(name="pglist_setting_id", unique=true, nullable=false)
	 private long pglistSettingId;
	 
	 public long getPglistSettingId() {
	     return this.pglistSettingId;
	 }
	 
	 public void setPglistSettingId(long pglistSettingId) {
	     this.pglistSettingId = pglistSettingId;
	 }		 	
	 
	 @Column(name="list_name")
	 private String listName;
	 
	 public String getListName() {
	     return this.listName;
	 }
	 
	 public void setListName(String listName) {
	     this.listName = listName;
	 }	 
	 
	 @Column(name="user_id")
	 private long userId;
	 
	 public long getUserId() {
	     return this.userId;
	 }
	 
	 public void setUserId(long userId) {
	     this.userId = userId;
	 }

	@Column(name="is_system_default")
	private boolean isSystemDefault;
	 
	public boolean getIsSystemDefault() {
		return isSystemDefault;
	}
	public void setIsSystemDefault(boolean isSystemDefault) {
		this.isSystemDefault = isSystemDefault;
	}
	
	@Column(name="is_active")
	private boolean isActive;
	 
	public boolean getIsActive() {
		return isActive;
	}
	public void setIsActive(boolean isActive) {
		this.isActive = isActive;
	}

	@Lob
	@Type(type="org.hibernate.type.BinaryType") 
    @Column(name = "serialized_object", length = Integer.MAX_VALUE - 1)
	private byte[] serializedObject;

    public byte[] getSerializedObject() {
        return serializedObject;
    }

    public void setSerializedObject( byte[] serializedObject ) {
        this.serializedObject = serializedObject;
    }

    @Transient
    public ListCriteriaDTO getListCriteriaDTO() {
		ListCriteriaDTO dto = null;
		try{
			dto = (ListCriteriaDTO) SerializationUtils.deserialize(serializedObject);
		}catch(Exception e){
			e.printStackTrace();
		}
        return dto;
    }

    /** Set ListCriteriaDTO, serialize, and generate the json debug string. */
    public void setListCriteriaDTO(ListCriteriaDTO listCriteriaDTO) {
		try{
			this.serializedObject = SerializationUtils.serialize((Serializable) listCriteriaDTO);			
		}catch(Exception e){
			e.printStackTrace();
		}        
    }	
   	 
	 @Column(name="json_object")
	 private String jsonObject;
	 
	 public String getJsonObject() {
	     return this.jsonObject;
	 }
	 
	 public void setJsonObject(String jsonObject) {
	     this.jsonObject = jsonObject;
	 }
	 
	 @Column(name="update_date", columnDefinition="Timestamp default sysdate", nullable=false ,insertable = false)
	 @org.hibernate.annotations.Generated(org.hibernate.annotations.GenerationTime.ALWAYS)
	 private Timestamp updateDate;
	 
	 public Timestamp getUpdateDate() {
	     return this.updateDate;
	 }
	 
	 public void setUpdateDate(Timestamp updateDate) {
	     this.updateDate = updateDate;
	 }
	 
}



